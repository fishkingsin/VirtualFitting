package {	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.SimpleButton;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.net.URLLoader;	import flash.net.URLRequest;	import net.hires.debug.Logger;	public class InterfacePraser extends EventDispatcher	{		public static const INIT = "initLoad";		private var mXML:XML;		private var xmlLoader:URLLoader;		public var pages:Vector.<Sprite> = new Vector.<Sprite>();		public var children:Vector.<Sprite> = new Vector.<Sprite>();		public var buttons:Vector.<customButton> = new Vector.<customButton>();		public var bgs:Vector.<customBackground> = new Vector.<customBackground>();					public function InterfacePraser()		{			// constructor code			initXML();		}		public function initXML():void		{			//xml = new XML  ;			var XML_URL:String = "data/interface.xml";			var myXMLURL:URLRequest = new URLRequest(XML_URL);			xmlLoader = new URLLoader(myXMLURL);			xmlLoader.addEventListener(Event.COMPLETE,xmlLoaded,false, 0.0, true);		}		public function switchButtonLanguage():void		{			for each (var btn:customButton in buttons)			{				btn.changeString();			}			for each (var bg:customBackground in bgs)			{				bg.changeString();			}		}		//=====================================================================================================================================		public function xmlLoaded(event:Event):void		{			this.mXML = XML(xmlLoader.data);			parseMessages(mXML);		}		//=====================================================================================================================================		private function parseMessages(node:XML):void		{			var pageNum:int = 0;			for each (var page:XML in node.PAGE)			{				//Logger.debug("page ---------"+pageNum);				var buttonNum:int = 0;				var pageMC:Sprite = new Sprite();								pageMC.name = page.attribute("name");				trace("page name---------"+pageMC.name);				pageMC.addEventListener(Event.REMOVED_FROM_STAGE,function onRemovedFromStage(e:Event):void				{					Logger.debug("InterfacePraser : PageMC -> "+e.target.name+" onRemovedFromStage");				});				pageMC.addEventListener(Event.ADDED_TO_STAGE,function onAddedFromStage(e:Event):void				{					Logger.debug("InterfacePraser : PageMC -> "+e.target.name+" onAddedToStage");				});				pages.push(pageMC);				for each (var bg:XML in page.BACKGROUND)				{					var _bg = new customBackground(bg,pageNum);					_bg.name = bg.attribute("name");					pageMC.addChild(_bg);					bgs.push(_bg);				}				for each (var button:XML in page.BUTTON)				{									//Logger.debug("button ---------"+buttonNum);					buttonNum++;					var btn = new customButton(button,buttonNum);					trace("button name---------"+button.attribute("name"));					pageMC.addChild(btn);					if (btn.name != "title")					{						buttons.push(btn);					}//Logger.debug(button);									}				for each (var list_group:XML in page.DROP_LIST_GROUP)				{										var dropListGroup:customDropdownListGroup = new customDropdownListGroup();					dropListGroup.name = list_group.attribute("name");					for each (var lists:XML in list_group.DROP_LIST)					{												var dropList:customDropDownList = new customDropDownList();						dropList.name = lists.attribute("name");						for each (var list_button:XML in lists.BUTTON)						{														buttonNum++;							var btn = new customButton(list_button,buttonNum);														dropList.addChild(btn);						}																		dropListGroup.addChild(dropList);					}										pageMC.addChild(dropListGroup);					dropListGroup.x = list_group.X;					dropListGroup.y = list_group.Y;				}												//addChild(pageMC);				pageNum++;			}			dispatchEvent(new Event(INIT));		}		public function getButtonByName(m_name:String):SimpleButton		{			for each (var btn:SimpleButton in buttons)			{				if (m_name==btn.name)				{					return btn;				}			}			return null;		}		public function getPageAt(i:uint):Sprite		{			return pages[i];		}		public function getPageByName(m_name:String):Sprite		{			for each (var mc:Sprite in pages)			{				if (m_name==mc.name)				{					//trace(mc + " return mc.name = " + mc.name);					return mc;				}			}			return null;		}		public function getBackgroundByName(m_name:String):Sprite		{			for each (var mc:Sprite in bgs)			{				if (m_name==mc.name)				{					//trace(mc + " return mc.name = " + mc.name);					return mc;				}			}			return null;		}		public function get xml():XML		{			return mXML;		}	}}