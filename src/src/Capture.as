package {	import flash.display.MovieClip;	import flash.media.Camera;	import flash.media.Video;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.utils.ByteArray;	import flash.events.MouseEvent;	import flash.filesystem.File;	import flash.filesystem.FileStream;	import flash.filesystem.FileMode;	import flash.geom.Matrix;	import com.adobe.images.JPGEncoder;
	import com.adobe.images.PNGEncoder;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.URLLoaderDataFormat;	import flash.display.LoaderInfo;	import flash.net.FileReference;
	import net.hires.debug.Logger;
	public class Capture extends MovieClip	{		var cam:Camera;		var vid:Video;		var CAM_WIDTH:int;		var CAM_HEIGHT:int;		var STAGE_WIDTH:Number;		var STAGE_HEIGHT:Number;		var bitmapData:BitmapData;		var bitmap:Bitmap;		var mc:MovieClip = new MovieClip  ;		var angle:Number = 0;		public function Capture()		{			// constructor code			if (stage!=null)			{				init();			}			else			{				addEventListener(Event.ADDED_TO_STAGE,onAddedToStage);							}		}		protected function init()		{			var loader:URLLoader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.VARIABLES;			loader.addEventListener(Event.COMPLETE, loadComplete);			loader.load(new URLRequest(getRootPath()+"data/config.txt"));		}		public function Pause()		{			removeEventListener(Event.ENTER_FRAME,onEnterFrame);		}		public function Start()		{			addEventListener(Event.ENTER_FRAME,onEnterFrame);		}		private function onAddedToStage(e:Event)		{			init();			//mc.removeEventListener(MouseEvent.CLICK,onClick);			removeEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			addEventListener(Event.REMOVED_FROM_STAGE,onRemovedFromStage);			Start();			if (vid!=null && cam!=null )			{				vid.attachCamera(cam);			}		}		private function onRemovedFromStage(e:Event)		{			addEventListener(Event.ADDED_TO_STAGE,onAddedToStage);			removeEventListener(Event.REMOVED_FROM_STAGE,onRemovedFromStage);			destroy();		}
		protected function destroy()
		{
			Pause();
			if (vid!=null && cam!=null )
			{
				vid.attachCamera(null);
			}
		}				private function loadComplete(e:Event)		{			var urlVar:URLVariables = new URLVariables(e.target.data);			cam = Camera.getCamera((urlVar.camera_id!=null)?urlVar.camera_id:"0");			Logger.debug(urlVar);			CAM_WIDTH = (urlVar.camerawidth!=null)?urlVar.camerawidth:640;			CAM_HEIGHT = (urlVar.cameraheight!=null)?urlVar.cameraheight:480;			STAGE_WIDTH = (urlVar.stagewidth!=null)?urlVar.stagewidth:1920;			STAGE_HEIGHT = (urlVar.stageheight!=null)?urlVar.stageheight:1080;			angle = (urlVar.angle!=null)?urlVar.angle:90;			cam.setMode(CAM_WIDTH, CAM_HEIGHT, (urlVar.cameraframerate!=null)?urlVar.cameraframerate:30);			vid = new Video(CAM_WIDTH,CAM_HEIGHT);			vid.attachCamera(cam);			//addChild(vid);			bitmapData = new BitmapData(CAM_HEIGHT,CAM_WIDTH);			bitmap = new Bitmap(bitmapData);			bitmap.x = 0;			bitmap.y = 0;			mc.addChild(bitmap);			mc.buttonMode = true;			addChild(mc);			mc.scaleY = mc.scaleX = STAGE_WIDTH / vid.height;			mc.addEventListener(MouseEvent.CLICK,onClick);			//vid.attachCamera(null);		}		protected function onEnterFrame(e:Event)		{			onDraw();		}		protected function onDraw()		{			if (bitmap!=null)			{				var testMatrix:Matrix = new Matrix();				testMatrix.translate(-bitmap.height/2,-bitmap.width/2);				testMatrix.rotate(Math.PI*(angle/180));				testMatrix.translate(bitmap.width/2,bitmap.height/2);				bitmapData.draw(vid,testMatrix);			}		}		protected function onClick(e:MouseEvent)		{			addEventListener(Event.ENTER_FRAME,function _onEnterFrame(e:Event)			{								captureAndSave(bitmapData);				removeEventListener(Event.ENTER_FRAME,_onEnterFrame);			});		}		protected function captureAndSave(_bitmapData:BitmapData):String		{			var now:Date = new Date();			var timestamp:String = now.valueOf().toString();			var path:String = "/data/"+timestamp+".png"			//var jpgEncoder:JPGEncoder = new JPGEncoder(100);			//var jpgStream:ByteArray = jpgEncoder.encode(_bitmapData);
									var file:File = new File(File.applicationDirectory.nativePath + path);			var stream:FileStream = new FileStream();			stream.open(file, FileMode.WRITE);			stream.writeBytes(PNGEncoder.encode(_bitmapData));			stream.close();			return path;		}		function getRootPath()		{			return getFullPath(this.root.loaderInfo);		}		function getFullPath(loaderInfo:LoaderInfo):String		{			var myObsolutePath:String;			var myRelativePath:String;			myObsolutePath = loaderInfo.url;			//Logger.debug(myObsolutePath);			if (myObsolutePath!=null)			{				var stringStart:Number = 0;				var stringEnd:Number = myObsolutePath.lastIndexOf("/") + 1;				myRelativePath = myObsolutePath.slice(stringStart,stringEnd);			}			else			{				myRelativePath = "";			}			return myRelativePath;		}	}}